"use strict";(self.webpackChunkjanush=self.webpackChunkjanush||[]).push([[19],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,g=m["".concat(l,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2672:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:5,title:"Features"},l=void 0,u={unversionedId:"features",id:"features",title:"Features",description:"Authentication",source:"@site/docs/features.md",sourceDirName:".",slug:"/features",permalink:"/docs/features",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/features.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Features"},sidebar:"tutorialSidebar",previous:{title:"E2E tests",permalink:"/docs/e2e-tests"},next:{title:"FAQ",permalink:"/docs/faq"}},p={},c=[{value:"Authentication",id:"authentication",level:2},{value:"Sign Up",id:"sign-up",level:3},{value:"Sign In",id:"sign-in",level:3},{value:"Forget Password",id:"forget-password",level:3},{value:"API",id:"api",level:2},{value:"GraphQL",id:"graphql",level:3},{value:"Users Management",id:"users-management",level:2},{value:"Create User Groups",id:"create-user-groups",level:3},{value:"Get User Groups",id:"get-user-groups",level:3}],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"authentication"},"Authentication"),(0,i.kt)("p",null,"The main module that is possible to generate is Authentication. It contains:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sign In"),(0,i.kt)("li",{parentName:"ul"},"Sign Up "),(0,i.kt)("li",{parentName:"ul"},"Forget Password")),(0,i.kt)("p",null,"They are done using Cognito User Pools and Cognito Identity Pools"),(0,i.kt)("h3",{id:"sign-up"},"Sign Up"),(0,i.kt)("p",null,"When the user wants to Sign Up, web application sends\na request to Amplify in order to Sign Up User. Here are required steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Go to ",(0,i.kt)("inlineCode",{parentName:"li"},"sign up")," page through ",(0,i.kt)("inlineCode",{parentName:"li"},"sign in")," page."),(0,i.kt)("li",{parentName:"ol"},"Fill the form and submit"),(0,i.kt)("li",{parentName:"ol"},"Then the user should see confirmation page"),(0,i.kt)("li",{parentName:"ol"},"The email with verification link should arrive to the email.\nThe request is sent using Amplify ")),(0,i.kt)("h3",{id:"sign-in"},"Sign In"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Go to ",(0,i.kt)("inlineCode",{parentName:"li"},"sign in")," page and fill the form"),(0,i.kt)("li",{parentName:"ol"},"The user should be redirected to the main page")),(0,i.kt)("h3",{id:"forget-password"},"Forget Password"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Got to the ",(0,i.kt)("inlineCode",{parentName:"li"},"forget password")," page"),(0,i.kt)("li",{parentName:"ol"},"Write an user email and submit resending email verification"),(0,i.kt)("li",{parentName:"ol"},"The user should be redirected to confirmation page")),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"graphql"},"GraphQL"),(0,i.kt)("p",null,"Janush provides a possibility to provision serverless GraphQL API using AppSync.\nThere is not a single schema file in ",(0,i.kt)("inlineCode",{parentName:"p"},"cloud")," directory. You can freely merge schema files\nto the single one by using"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm run schema:merge\n")),(0,i.kt)("h2",{id:"users-management"},"Users Management"),(0,i.kt)("p",null,"The module is related to admin panel that generated app can use in order to manage users in Cognito. It is mainly about\nuser groups. They can be used as a roles or permissions to the system. "),(0,i.kt)("h3",{id:"create-user-groups"},"Create User Groups"),(0,i.kt)("p",null,"Cognito has a feature to group to assign users to groups. If you select creating users management module then it will\ngenerate ",(0,i.kt)("inlineCode",{parentName:"p"},"admin")," group"),(0,i.kt)("p",null,"As an example, the mutation below is responsible for creating user groups in Cognito.\nYou can simply test it in AWS AppSync console or Postman"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation createUserGroup {\n    createUserGroup(group: { groupName: "testGroup" })\n}\n')),(0,i.kt)("h3",{id:"get-user-groups"},"Get User Groups"),(0,i.kt)("p",null,"There is a possibility to list Cognito groups. The exemplary query in AppSync is presented below"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"query MyQuery {\n  allUserGroups {\n    Description\n    Precedence\n    GroupName\n  }\n}\n")))}d.isMDXComponent=!0}}]);