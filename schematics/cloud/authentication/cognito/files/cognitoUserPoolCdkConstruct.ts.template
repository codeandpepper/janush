import {
  StackProps,
  Duration,
  aws_cognito as cognito,
} from "aws-cdk-lib";
import { Construct } from "constructs";

import { EnvName } from "../../enums/EnvName";
<% if (idP.length) { %>import {
  <% if (isFacebook) { %>facebookIdentityProvider,<% } %>
  <% if (isGoogle) { %>googleIdentityProvider,<% } %>
  <% if (isApple) { %>appleIdentityProvider,<% } %>
} from "./identityProviders";<% } %>

interface CognitoUserPoolProps {
  envName: EnvName;
}

export class CognitoUserPoolCdkConstruct extends Construct {
  public userPool: cognito.UserPool;
  public userPoolClient: cognito.UserPoolClient;
  <% if (idP.length) { %>public userPoolDomain: cognito.UserPoolDomain;<% } %>
  <% if (isFacebook) { %>public userPoolIdentityProviderFacebook: cognito.UserPoolIdentityProviderFacebook;<% } %>
  <% if (isGoogle) { %>public userPoolIdentityProviderGoogle: cognito.UserPoolIdentityProviderGoogle;<% } %>
  <% if (isApple) { %>public userPoolIdentityProviderApple: cognito.UserPoolIdentityProviderApple;<% } %>
  
  constructor(
    scope: Construct,
    id: string,
    { envName }: StackProps & CognitoUserPoolProps
  ) {
    super(scope, id);

    this.userPool = new cognito.UserPool(this, `${envName}-CognitoUserPool`, {
      accountRecovery: cognito.AccountRecovery.EMAIL_ONLY,
      autoVerify: {
        email: true,
      },
      passwordPolicy: {
        minLength: 10,
        requireLowercase: true,
        requireUppercase: true,
        requireDigits: true,
        requireSymbols: false,
        tempPasswordValidity: Duration.days(3),
      },
      selfSignUpEnabled: true,
      signInAliases: {
        email: true,
      },
      standardAttributes: {
        email: {
          mutable: true,
          required: false,
        },
      },
    });

    this.userPoolClient = new cognito.UserPoolClient(
      this,
      `${envName}-CognitoUserPoolClient`,
      {
        disableOAuth: false,
        supportedIdentityProviders: [
          cognito.UserPoolClientIdentityProvider.COGNITO,
          <% if (isFacebook) { %>cognito.UserPoolClientIdentityProvider.FACEBOOK,<% } %>
          <% if (isGoogle) { %>cognito.UserPoolClientIdentityProvider.GOOGLE,<% } %>
          <% if (isApple) { %>cognito.UserPoolClientIdentityProvider.APPLE,<% } %>
        ],
        <% if (idP.length) { %>oAuth: {
          callbackUrls: [process.env.USER_POOL_REDIRECT_SIGN_IN],
          logoutUrls: [process.env.USER_POOL_REDIRECT_SIGN_OUT],
        },<% } %>
        preventUserExistenceErrors: true,
        userPool: this.userPool,
      }
    );

    <% if (isFacebook) { %>this.userPoolIdentityProviderFacebook = facebookIdentityProvider(
      this,
      envName
    );<% } %>
    <% if (isGoogle) { %>this.userPoolIdentityProviderGoogle = googleIdentityProvider(this, envName);<% } %>
    <% if (isApple) { %>this.userPoolIdentityProviderApple = appleIdentityProvider(this, envName);<% } %>

    <% if (idP.length) { %>this.userPoolDomain = new cognito.UserPoolDomain(
      this,
      `${envName}-CognitoUserPoolDomain`,
      {
        userPool: this.userPool,
        cognitoDomain: {
          domainPrefix: "<%= dasherize(name) %>-<%= timeStamp %>",
        },
      }
    );<% } %>

    this.userPoolClient.node.addDependency(this.userPool);
    <% if (isFacebook) { %>this.userPoolClient.node.addDependency(
      this.userPoolIdentityProviderFacebook
    );<% } %>
    <% if (isGoogle) { %>this.userPoolClient.node.addDependency(this.userPoolIdentityProviderGoogle);<% } %>
    <% if (isApple) { %>this.userPoolClient.node.addDependency(this.userPoolIdentityProviderApple);<% } %>
  }
}
