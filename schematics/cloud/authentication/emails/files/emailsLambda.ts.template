import { CustomMessageTriggerHandler } from "aws-lambda";
import { S3 } from "aws-sdk";

import { CognitoMessageTriggerSource } from "../../../enums/CognitoMessageTriggerSource";
import { EmailTemplate } from "../../../enums/EmailTemplate";
import { generateEmailFromS3Template } from "./utils";
import { handleError } from "../../../utils/handleError";

const s3 = new S3();

/**
 * Helper function, which generates link with email & code
 * @param eventType   - Type of event to handle
 * @param email       - Email address
 */
export const generateCodeLink = (
  eventType: CognitoMessageTriggerSource,
  email: string
): string => {
  const defaultDomain = "https://janush.app";

  console.log(`Forming URL for event: ${eventType}`);

  const path = (() => {
    switch (eventType) {
      case CognitoMessageTriggerSource.ForgotPassword:
        return "create-new-password";
      case CognitoMessageTriggerSource.SignUp:
      case CognitoMessageTriggerSource.SignUpAdmin:
      case CognitoMessageTriggerSource.ResendCode:
        return "confirm-signup";
    }
  })();

  return `${process.env.WEB_APP_URL}/${path}?username=${encodeURIComponent(
    email
  )}&code={####}`;
};

export const handler: CustomMessageTriggerHandler = async (
  event,
  context,
  callback
) => {
  try {
    const triggerSource = event.triggerSource as CognitoMessageTriggerSource;

    if (
      [
        CognitoMessageTriggerSource.SignUp,
        CognitoMessageTriggerSource.SignUpAdmin,
        CognitoMessageTriggerSource.ResendCode,
      ].includes(triggerSource)
    ) {
      if (event.request.userAttributes.email_verified === "true") {
        callback(new Error("User already verified"), event);
        return;
      }

      const {
        request: {
          userAttributes: { email },
        },
      } = event;

      const activationLink = generateCodeLink(triggerSource, email);

      const reformedReplacements: [RegExp, string][] = [
        [/%ACTIVATION%/g, activationLink],
      ];

      event.response.emailSubject = "<%= classify(name) %> | Verify account";
      event.response.emailMessage = await generateEmailFromS3Template(s3, {
        bucketName: process.env.EMAIL_TEMPLATES_BUCKET_NAME!,
        templateName: EmailTemplate.EMAIL_VERIFICATION,
        reformedReplacements,
      });
    } else if (triggerSource === CognitoMessageTriggerSource.ForgotPassword) {
      const {
        request: {
          userAttributes: { email },
        },
      } = event;

      const resetLink = generateCodeLink(triggerSource, email);

      const reformedReplacements: [RegExp, string][] = [
        [/%RESETPASSWORD%/g, resetLink],
      ];

      event.response.emailSubject = "<%= classify(name) %> | Reset password";
      event.response.emailMessage = await generateEmailFromS3Template(s3, {
        templateName: EmailTemplate.RESET_PASSWORD,
        bucketName: process.env.TEMPLATE_BUCKET_NAME!,
        reformedReplacements,
      });
    }
  } catch (e) {
    handleError(e);
    handleError(
      new Error(
        `Error occurred while fetching event ${event.triggerSource}. I am going to send default Email message!`
      )
    )
  }

  callback(null, event);
};
