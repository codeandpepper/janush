import { strings } from "@angular-devkit/core";
import {
  apply,
  applyTemplates,
  chain,
  MergeStrategy,
  mergeWith,
  move,
  noop,
  Rule,
  schematic,
  SchematicContext,
  Tree,
  url,
} from "@angular-devkit/schematics";

import { Module } from "@enums/Module";
import { CloudSchematic, Schematic } from "@enums/Schematic";
import { getCurrentWorkingDirectory } from "@janush-schematics/utility/directoryUtils";
import { readJanushJSON, updateJanushJSON } from "@utility/janushJson";
import { installDependencies } from "@utility/scripts";

import { Schema } from "./schema";

const isEmptyModules = (options: Schema) => options.modules.length === 0;
const isAuthenticationModule = (options: Schema) => options.modules.includes(Module.AUTHENTICATION);

export const cloudTemplateGenerator = (options: Schema): Rule => {
  return async (tree: Tree, _context: SchematicContext) => {
    const janushFile = readJanushJSON(tree);
    const name = strings.dasherize(janushFile.name);
    const currentWorkingDirectory = getCurrentWorkingDirectory();
    const workingDirectory = currentWorkingDirectory.includes(name)
      ? Schematic.CLOUD
      : `${name}/${Schematic.CLOUD}`;

    if (!isEmptyModules(options)) {
      janushFile.cloud.module[Module.AUTHENTICATION] = isAuthenticationModule(options);
      updateJanushJSON(tree, janushFile);
    }

    if (!options.skipInstall) {
      _context.addTask(installDependencies(workingDirectory), []);
    }

    return chain([
      mergeWith(
        apply(url("./files"), [
          applyTemplates({
            ...options,
            ...strings,
          }),
          move(Schematic.CLOUD),
        ]),
        MergeStrategy.Overwrite,
      ),
      !isEmptyModules(options) ? schematic(CloudSchematic.JANUSH, options) : noop(),
      isAuthenticationModule(options) ? schematic(CloudSchematic.AUTHENTICATION, options) : noop(),
      options.isAutoGenerated ? schematic(CloudSchematic.CI, {}) : noop(),
      schematic("applyPrettier", {}),
    ]);
  };
};
