import React, { useState } from "react";

import { Control, FieldValues, Path } from "react-hook-form";
import { useTheme } from "@mui/styles";
import { IconButton, InputAdornment, Theme, Tooltip } from "@mui/material";
import { GenericInputField } from "@components/GenericInputField/GenericInputField";
import { Lock, Visibility, VisibilityOff } from "@mui/icons-material";

interface Props<T extends FieldValues> {
  id?: string;
  name: Path<T>;
  control: Control<T>;
  error: string | undefined;
  label: string;
  dataTestId?: string;
  adornmentDataTestId?: string;
  placeholder?: string;
  autoFocus?: boolean;
  autoComplete?: string;
  withIcon?: boolean;
  labelWidth?: number;
}

export const PasswordField = <T extends FieldValues>({
  id,
  name,
  error,
  label,
  control,
  dataTestId = "password-input-field",
  adornmentDataTestId = "show-password-button",
  placeholder,
  autoComplete,
  autoFocus,
  withIcon = true,
}: Props<T>): JSX.Element => {
  const theme = useTheme<Theme>();
  const [isPasswordVisible, setPasswordVisible] = useState<boolean>(false);

  const onVisibilityToggleClick = () => {
    setPasswordVisible((prevState) => !prevState);
  };

  const handleMouseDownPassword = (
    event: React.MouseEvent<HTMLButtonElement>
  ) => {
    event.preventDefault();
  };

  const visibilityButtonLabel = (passwordShown: boolean): string =>
    passwordShown ? "Hide password" : "Show password";

  return (
    <GenericInputField
      name={name}
      control={control}
      error={!!error}
      helperText={error}
      label={label}
      dataTestId={dataTestId}
      placeholder={placeholder}
      type={isPasswordVisible ? "text" : "password"}
      InputProps={{
        endAdornment: withIcon && (
          <InputAdornment position="end">
            <Tooltip title={visibilityButtonLabel(isPasswordVisible)}>
              <IconButton
                aria-controls={id}
                data-testid={adornmentDataTestId}
                aria-expanded={isPasswordVisible}
                aria-label={visibilityButtonLabel(isPasswordVisible)}
                onClick={onVisibilityToggleClick}
                onMouseDown={handleMouseDownPassword}
                edge="end"
              >
                {isPasswordVisible ? (
                  <VisibilityOff htmlColor={theme.palette.secondary.dark} />
                ) : (
                  <Visibility htmlColor={theme.palette.secondary.light} />
                )}
              </IconButton>
            </Tooltip>
          </InputAdornment>
        ),
        startAdornment: (
          <InputAdornment position="start">
            <Lock color="secondary" />
          </InputAdornment>
        ),
      }}
      autoFocus={autoFocus}
      autoComplete={autoComplete}
    />
  );
};
