import React from "react";

import { yupResolver } from "@hookform/resolvers/yup";
import { Button, CircularProgress, Grid, Typography } from "@mui/material";
import { useForm, Controller } from "react-hook-form";

import { Form } from "@components/Form/Form";
import { EmailField } from "@components/EmailField/EmailField";
import { PasswordField } from "@components/PasswordField/PasswordField";

import { signInFormValidationSchema } from "./signInFormValidationSchema";
import { SignInFormState } from "./SignInFormState";

import { useStyles } from "./styles";

interface Props {
  error: string;
  loading: boolean;
  onSubmit(formData: SignInFormState): void;
}

const defaultValues: SignInFormState = {
  email: "",
  password: "",
};

export const SignInForm: React.VFC<Props> = ({ error, loading, onSubmit }) => {
  const classes = useStyles();

  const {
    handleSubmit,
    control,
    formState: { errors },
  } = useForm<SignInFormState>({
    resolver: yupResolver(signInFormValidationSchema()),
    defaultValues,
  });

  return (
    <Form onSubmit={handleSubmit(onSubmit)}>
      <Controller
        name="email"
        control={control}
        render={({ field }) => (
          <EmailField
            onChange={field.onChange}
            errorMessage={errors.email?.message}
            autoComplete="email"
            autoFocus
          />
        )}
      />
      <Controller
        name="password"
        control={control}
        render={({ field }) => (
          <PasswordField
            onChange={field.onChange}
            errorMessage={errors.password?.message}
            ariaControls="password"
            label="Password"
            placeholder="Password"
            autoComplete="current-password"
          />
        )}
      />
      <Typography color="error" align="center" className={classes.error}>
        {error ? error : " "}
      </Typography>
      <Grid container justifyContent="flex-end" spacing={1}>
        <Grid item xs={12}>
          <Button
            color="primary"
            type="submit"
            data-testid="sign-in-button"
            variant="contained"
            disabled={loading}
            fullWidth
          >
            Sign in
          </Button>
          {loading && (
            <CircularProgress size={20} className={classes.buttonProgress} />
          )}
        </Grid>
      </Grid>
    </Form>
  );
};
