import React from "react";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";

import { Form } from "@components/Form/Form";
import { EmailField } from "@components/EmailField/EmailField";
import { PasswordField } from "@components/PasswordField/PasswordField";

import { SignUpFormState } from "./SignUpFormState";
import { signUpFormValidationSchema } from "./signUpFormValidationSchema";
import { useStyles } from "./styles";
import { Box, Button, CircularProgress } from "@mui/material";

const defaultValues: SignUpFormState = {
  email: "",
  password: "",
  confirmPassword: "",
};

interface Props {
  loading: boolean;
  onSubmit(formData: SignUpFormState): void;
}

export const SignUpForm: React.FC<Props> = ({ loading, onSubmit }) => {
  const classes = useStyles();

  const {
    control,
    handleSubmit,
    formState: { errors },
  } = useForm<SignUpFormState>({
    resolver: yupResolver(signUpFormValidationSchema()),
    defaultValues,
  });

  return (
    <Form onSubmit={handleSubmit(onSubmit)}>
      <EmailField
        name="email"
        autoComplete="email"
        control={control}
        error={errors.email?.message}
        autoFocus
      />
      <PasswordField
        id="password"
        name="password"
        control={control}
        error={errors.password?.message}
        label="Password"
        placeholder="Password"
        autoComplete="new-password"
      />
      <PasswordField
        id="confirm-password"
        name="confirmPassword"
        control={control}
        error={errors.confirmPassword?.message}
        label="Confirm Password"
        placeholder="Confirm Password"
        dataTestId="confirm-password-input-field"
        adornmentDataTestId="show-confirm-password-button"
        autoComplete="new-password"
        labelWidth={120}
      />
      <Box display="flex" flexDirection="row" alignItems="center" mt={2}>
        <Button
          color="primary"
          type="submit"
          data-testid="sign-up-button"
          variant="contained"
          disabled={loading}
          fullWidth
        >
          Sign up
        </Button>
        {loading && (
          <CircularProgress size={20} className={classes.buttonProgress} />
        )}
      </Box>
    </Form>
  );
};
