import { expect, Page } from "@playwright/test";

import { authSelectors } from "../selectors/auth-selectors";
import { indexPageSelectors } from "../selectors/index-page";
import AWSMethods from "./aws-calls";

export const dataTestId = (name: string): string => {
  return `[data-testid="${name}"]`;
};

export class GlobalMethods extends AWSMethods {
  constructor(public readonly page: Page) {
    super();
  }

  async visit(relativePath: string) {
    await this.page.goto(relativePath);
  }

  async waitForAppURL(url: string) {
    await this.page.waitForURL(url);
  }

  async fillSignUpForm(email: string, password: string) {
    await this.typeText(authSelectors.inputs.email, email);
    await this.typeText(authSelectors.inputs.password, password);
    await this.typeText(authSelectors.inputs.confirmPassword, password);
  }

  async fillSignInForm(email: string, password: string) {
    await this.page.type(dataTestId(authSelectors.inputs.email), email);
    await this.page.type(dataTestId(authSelectors.inputs.password), password);
  }

  async signOut() {
    await this.page.click(dataTestId(indexPageSelectors.buttons.signOut));
  }

  async clickOn(selector: string) {
    await this.page.click(dataTestId(selector));
  }

  async typeText(selector: string, text: string) {
    await this.page.type(dataTestId(selector), text);
  }

  async clearElement(selector: string) {
    await this.page.fill(dataTestId(selector), "");
  }

  async checkValidation(text: string) {
    await this.page.waitForSelector(`text=${text}`);
  }

  async shouldBeEnabled(selector: string) {
    const isEnabled = await this.page.isEnabled(dataTestId(selector));
    expect(isEnabled).toBeTruthy();
  }

  async shouldBeDisabled(selector: string) {
    const isDisabled = await this.page.isDisabled(dataTestId(selector));
    expect(isDisabled).toBeTruthy();
  }

  async shouldBeVisible(selector: string) {
    const isVisible = await this.page.isVisible(dataTestId(selector));
    expect(isVisible).toBeTruthy();
  }

  async checkIfTextIsShown(selector: string, text: string) {
    await this.page.waitForSelector(
      `${dataTestId(selector)}:has-text("${text}")`
    );
  }

  async checkIfPasswordIsVisible(selector: string, isVisible: boolean) {
    const passwordType = await this.page.getAttribute(
      dataTestId(selector),
      "type"
    );
    if (isVisible) {
      expect(passwordType).toBe("text");
    } else {
      expect(passwordType).toBe("password");
    }
  }
}

export default GlobalMethods;
