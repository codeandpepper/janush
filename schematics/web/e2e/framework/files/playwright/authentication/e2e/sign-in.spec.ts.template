import { test } from "@playwright/test";

import {
  FakeUserData,
  generateFakeUserData,
} from "../page-objects/methods/generate-data";
import GlobalMethods from "../page-objects/methods/global-commands";
import { authSelectors } from "../page-objects/selectors/auth-selectors";

const user: FakeUserData = generateFakeUserData();

test.describe("Sign in page test suite", () => {
  let pw: GlobalMethods;

  test.beforeAll(async ({ browser }) => {
    const page = await browser.newPage();
    pw = new GlobalMethods(page);

    await pw.visit("/sign-in");
    await pw.waitForAppURL("/sign-in");
  });

  test("User is able to see password after clicking show password icon", async () => {
    await pw.typeText(authSelectors.inputs.password, user.password.correct);
    await pw.clickOn(authSelectors.buttons.showPassword);
    await pw.checkIfPasswordIsVisible(authSelectors.inputs.password, true);
    await pw.clickOn(authSelectors.buttons.showPassword);
    await pw.checkIfPasswordIsVisible(authSelectors.inputs.password, false);
  });

  test("User is not able to sign in when email is missing", async () => {
    await pw.clickOn(authSelectors.buttons.signIn);
    await pw.checkValidation("Email is a required field");
  });

  test("User is not able to sign in when password is missing", async () => {
    await pw.typeText(authSelectors.inputs.email, user.email.correct);
    await pw.clearElement(authSelectors.inputs.password);
    await pw.clickOn(authSelectors.buttons.signIn);
    await pw.checkValidation("Password is a required field");
  });

  test("User is not able to sign in when email address is incorrect", async () => {
    await pw.typeText(authSelectors.inputs.password, user.password.correct);
    await pw.clearElement(authSelectors.inputs.email);
    await pw.typeText(authSelectors.inputs.email, user.email.withoutAtSign);
    await pw.clickOn(authSelectors.buttons.signIn);
    await pw.checkValidation("Email is not correct");
    await pw.clearElement(authSelectors.inputs.email);
    await pw.typeText(authSelectors.inputs.email, user.email.withoutDomain);
    await pw.clickOn(authSelectors.buttons.signIn);
    await pw.checkValidation("Email is not correct");
  });

  test("User is not able to sign in with non existing user data", async () => {
    await pw.clearElement(authSelectors.inputs.email);
    await pw.typeText(authSelectors.inputs.email, user.email.correct);
    await pw.clickOn(authSelectors.buttons.signIn);
    await pw.checkValidation("Incorrect email or password");
  });
});
