name: janush.app

on:
  push:
    branches:
      - main
    pull_request:
      types: [opened, synchronize, reopened]

jobs:
  cloud-install:
    name: (CLOUD) Installation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - uses: actions/cache@v2
        with:
          path: cloud/node_modules
          key: ${{ runner.os }}-${{ hashFiles('cloud/package-lock.json') }}
      - run: npm install
        working-directory: ./cloud

  cloud-test:
    needs: cloud-install
    name: (CLOUD) Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm install
        working-directory: ./cloud
      - run: npm run test
        working-directory: ./cloud

  cloud-deploy:
    needs: [cloud-test, web-test]
    name: (CLOUD) Deployment
    runs-on: ubuntu-latest
    outputs:
      cognitoIdentityPoolId: ${{ steps.deployment.outputs.cognitoIdentityPoolId }}
      cognitoUserPoolId: ${{ steps.deployment.outputs.cognitoUserPoolId }}
      cognitoUserPoolClientId: ${{ steps.deployment.outputs.cognitoUserPoolClientId }}
      s3BucketName: ${{ steps.webBuild.outputs.s3BucketName }}
      amplifyAppId: ${{ steps.webBuild.outputs.amplifyAppId }}
      amplifyAppBranchName: ${{ steps.webBuild.outputs.amplifyAppBranchName }}
    steps:
      - uses: actions/checkout@v2
      - run: npm install
        working-directory: ./cloud
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
      - id: deployment
        run: |
          npm run cdk deploy <%= classify(name) %>CiStack -- --require-approval never
        env:
          # Lambda name creation required
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
        working-directory: ./cloud
      - id: webBuild
        run: |
          npm run cdk deploy <%= classify(name) %>CiStack -- --require-approval never
          echo ::set-output name=s3BucketName::$(aws cloudformation describe-stacks --stack-name <%= classify(name) %>CiStack --query "Stacks[0].Outputs[?ExportName=='s3BucketName<%= classify(name) %>'].OutputValue" --output text)
          echo ::set-output name=amplifyAppId::$(aws cloudformation describe-stacks --stack-name <%= classify(name) %>CiStack --query "Stacks[0].Outputs[?ExportName=='amplifyAppId'].OutputValue" --output text)
          echo ::set-output name=amplifyAppBranchName::$(aws cloudformation describe-stacks --stack-name <%= classify(name) %>CiStack --query "Stacks[0].Outputs[?ExportName=='amplifyAppBranchName'].OutputValue" --output text)
        working-directory: ./cloud

  web-install:
    name: (WEB) Installation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: web/node_modules
          key: ${{ runner.os }}-${{ hashFiles('web/package-lock.json') }}
      - run: npm install
        working-directory: ./web

  web-test:
    needs: web-install
    name: (WEB) Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm install
        working-directory: ./web
      - run: npm run test
        working-directory: ./web

  web-deployment:
    needs: [cloud-deploy]
    name: (WEB) Deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
      - run: |
          npm install
          echo "IDENTITY_POOL_ID=$(aws cloudformation describe-stacks --stack-name <%= classify(name) %>CiStack --query "Stacks[0].Outputs[?ExportName=='cognitoIdentityPoolId<%= classify(name) %>'].OutputValue" --output text)" >> $GITHUB_ENV
          echo "USER_POOL_ID=$(aws cloudformation describe-stacks --stack-name <%= classify(name) %>CiStack --query "Stacks[0].Outputs[?ExportName=='cognitoUserPoolId<%= classify(name) %>'].OutputValue" --output text)" >> $GITHUB_ENV
          echo "USER_POOL_WEB_CLIENT_ID=$(aws cloudformation describe-stacks --stack-name <%= classify(name) %>CiStack --query "Stacks[0].Outputs[?ExportName=='cognitoUserPoolClientId<%= classify(name) %>'].OutputValue" --output text)" >> $GITHUB_ENV
        working-directory: ./web
      - run: REACT_APP_REGION=${{ secrets.REGION }} REACT_APP_IDENTITY_POOL_ID=${{env.IDENTITY_POOL_ID}} REACT_APP_USER_POOL_ID=${{env.USER_POOL_ID}} REACT_APP_USER_POOL_WEB_CLIENT_ID=${{env.USER_POOL_WEB_CLIENT_ID}} npm run build
        working-directory: ./web
      - run: mkdir bucket
        working-directory: ./web
      - uses: montudor/action-zip@v1
      - run: zip -qq -r build.zip .
        working-directory: ./web/build
      - run: cp ./web/build/build.zip ./web/bucket/build_${{ github.sha }}.zip
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{ needs.cloud-deploy.outputs.s3BucketName }}
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.REGION }}
          SOURCE_DIR: ./web/bucket
      - run: |
         chmod 775 ./.github/workflows/bin/waitForAmplifyJob.sh
         JOB_ID=`aws amplify start-deployment --app-id=${{ needs.cloud-deploy.outputs.amplifyAppId }} --branch-name=${{ needs.cloud-deploy.outputs.amplifyAppBranchName }} --source-url=s3://${{ needs.cloud-deploy.outputs.s3BucketName }}/build_${{ github.sha }}.zip --output text --query "jobSummary.jobId"`
         echo amplify deployment job id: $JOB_ID
         ./.github/workflows/bin/waitForAmplifyJob.sh ${{ needs.cloud-deploy.outputs.amplifyAppId }} ${{ needs.cloud-deploy.outputs.amplifyAppBranchName }} $JOB_ID 50 5