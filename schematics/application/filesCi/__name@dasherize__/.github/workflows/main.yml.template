name: janush.app

on: workflow_dispatch

jobs:
  cloud-install:
    name: (CLOUD) Installation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - uses: actions/cache@v2
        with:
          path: cloud/node_modules
          key: ${{ runner.os }}-${{ hashFiles('cloud/package-lock.json') }}
      - run: npm install
        working-directory: ./cloud

  cloud-test:
    needs: cloud-install
    name: (CLOUD) Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm install
        working-directory: ./cloud
      - run: npm run test
        working-directory: ./cloud

  web-install:
    name: (WEB) Installation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: web/node_modules
          key: ${{ runner.os }}-${{ hashFiles('web/package-lock.json') }}
      - run: npm install
        working-directory: ./web

  web-test:
    needs: web-install
    name: (WEB) Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm install
        working-directory: ./web
      - run: npm run test
        working-directory: ./web        

  cloud-deploy:
    needs: [cloud-test, web-test]
    name: (CLOUD) Deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: cloud/node_modules
          key: ${{ runner.os }}-${{ hashFiles('cloud/package-lock.json') }}      
      - run: npm install
        working-directory: ./cloud
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
          mask-aws-account-id: 'false'
      - uses: ./.github/actions/cognito
        env:
          # Lambda name creation required
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
      - uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'IDENTITY_POOL_ID'
          value: ${{ env.identityPoolId }}
          repository: codeandpepper/janush.app
          token: ${{ secrets.TOKEN }}
          visibility: 'all'
      - uses: hmanzur/actions-set-secret@v2.0.0
        with:
          name: 'USER_POOL_ID'
          value: ${{ env.userPoolId }}
          repository: codeandpepper/janush.app
          token: ${{ secrets.TOKEN }}
          visibility: 'all'          
      - uses: ./.github/actions/amplify
    outputs:
      userPoolWebClientId: ${{ env.userPoolWebClientId }}
      s3BucketName: ${{ env.s3BucketName }}
      amplifyAppId: ${{ env.amplifyAppId }}
      amplifyAppBranchName: ${{ env.amplifyAppBranchName }}

  web-deployment:
    needs: [cloud-deploy]
    name: (WEB) Deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: web/node_modules
          key: ${{ runner.os }}-${{ hashFiles('web/package-lock.json') }}  
      - run: npm install
        working-directory: ./web             
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}           
      - run: >
          REACT_APP_REGION=${{ secrets.REGION }}
          REACT_APP_IDENTITY_POOL_ID=${{ secrets.IDENTITY_POOL_ID }}
          REACT_APP_USER_POOL_ID=${{ secrets.USER_POOL_ID }}
          REACT_APP_USER_POOL_WEB_CLIENT_ID=${{ needs.cloud-deploy.outputs.userPoolWebClientId }}
          npm run build
        working-directory: ./web
      - run: mkdir bucket
        working-directory: ./web
      - uses: montudor/action-zip@v1
      - run: zip -qq -r build.zip .
        working-directory: ./web/build
      - run: cp ./web/build/build.zip ./web/bucket/build_${{ github.sha }}.zip
      - uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{ needs.cloud-deploy.outputs.s3BucketName }}
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.REGION }}
          SOURCE_DIR: ./web/bucket
      - run: |
         chmod 775 ./.github/workflows/bin/waitForAmplifyJob.sh
         JOB_ID=`aws amplify start-deployment \
         --app-id=${{ needs.cloud-deploy.outputs.amplifyAppId }} \
         --branch-name=${{ needs.cloud-deploy.outputs.amplifyAppBranchName }} \
         --source-url=s3://${{ needs.cloud-deploy.outputs.s3BucketName }}/build_${{ github.sha }}.zip \
         --output text --query "jobSummary.jobId"`
         echo amplify deployment job id: $JOB_ID
         ./.github/workflows/bin/waitForAmplifyJob.sh \
         ${{ needs.cloud-deploy.outputs.amplifyAppId }} \
         ${{ needs.cloud-deploy.outputs.amplifyAppBranchName }} \
         $JOB_ID 50 5