import { strings } from "@angular-devkit/core";
import {
  apply,
  applyTemplates,
  chain,
  MergeStrategy,
  mergeWith,
  noop,
  Rule,
  schematic,
  SchematicContext,
  Tree,
  url,
} from "@angular-devkit/schematics";
import { dasherize } from "@angular-devkit/core/src/utils/strings";

import { Schematic } from "@enums/Schematic";
import { Schema } from "./schema";
import { stubArg } from "@janush-schematics/utility/stubArg/stubArg";
import readJsonFile from "@janush-schematics/utility/readJsonFile";
import {
  checkboxPrompt,
  inputPrompt,
} from "@janush-schematics/utility/dynamicPrompts";

export const isCloud = (options: Schema) =>
  options.types.includes(Schematic.CLOUD);
export const isWeb = (options: Schema) => options.types.includes(Schematic.WEB);

export const applicationGenerator = (options: Schema): Rule => {
  return async (_: Tree, _context: SchematicContext) => {
    if (!!options.version) {
      return console.log(`v${readJsonFile("/package.json").version}`);
    }

    if (!options.name) {
      options.name = await inputPrompt(
        "Application name:",
        "Application name",
        "janush-app"
      );
    }

    if (options.types.length === 0) {
      options.types = await checkboxPrompt(
        "Which application type would you like to use?",
        "Application type(s)",
        [Schematic.WEB, Schematic.CLOUD],
        [true, true]
      );
    }

    const scope = dasherize(options.name);

    return chain([
      mergeWith(
        apply(url("./files"), [
          applyTemplates({
            ...options,
            ...strings,
          }),
        ]),
        MergeStrategy.Overwrite
      ),
      options.isAutoGenerated
        ? mergeWith(
            apply(url("./files-ci"), [
              applyTemplates({
                ...options,
                ...strings,
              }),
            ]),
            MergeStrategy.Overwrite
          )
        : stubArg,
      isCloud(options)
        ? schematic(Schematic.CLOUD, options, { scope })
        : noop(),
      isWeb(options) ? schematic(Schematic.WEB, options, { scope }) : noop(),
      schematic("apply-prettier", {}, { scope }),
    ]);
  };
};
